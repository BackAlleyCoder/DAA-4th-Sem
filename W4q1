/*Given an unsorted array of integers, design an algorithm and implement it using a program to sort an array of elements by dividing the array into two subarrays and combing these subarrays after sorting each one of them. Your program should also find the number of comparisons and invwrsions during sorting the array.

Input format:
The first line contains number of test cases, T.
For each test case, there will be two input lines.
First line contains n (the size of array).
Second line contains space-separated integers describing array.

Output Format:
The output will have T number of lines.
For each test case T, there will be three output lines.
First line will give the sorted array.
Second line will give total number of comparisons.
Third line will give total number of inversions required.*/

#include <stdio.h>
#include <stdlib.h>

void merge(int arr[], int left, int mid, int right, int *comparisons, int *inversions) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    int L[n1], R[n2];
    for (int i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];

    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        (*comparisons)++;
        if (L[i] <= R[j]) {
            arr[k++] = L[i++];
        } else {
            arr[k++] = R[j++];
            (*inversions) += (mid - i + 1); 
        }
    }

    while (i < n1) {
        arr[k++] = L[i++];
    }

    while (j < n2) {
        arr[k++] = R[j++];
    }
}

void mergeSort(int arr[], int left, int right, int *comparisons, int *inversions) {
    if (left < right) {
        int mid = left + (right - left) / 2;

        mergeSort(arr, left, mid, comparisons, inversions);
        mergeSort(arr, mid + 1, right, comparisons, inversions);

        merge(arr, left, mid, right, comparisons, inversions);
    }
}

int main() {
    int t; 
    scanf("%d", &t);
    
    while (t--) {
        int n; 
        scanf("%d", &n);
        int arr[n]; 
        for (int i = 0; i < n; i++) {
            scanf("%d", &arr[i]); 
        }
        
        int comparisons = 0, inversions = 0;
        mergeSort(arr, 0, n - 1, &comparisons, &inversions);
        
        for (int i = 0; i < n; i++) {
            printf("%d ", arr[i]);
        }
        printf("\n");
        
        printf("%d\n", comparisons);
        
        printf("%d\n", inversions);
    }
    
    return 0;
}
